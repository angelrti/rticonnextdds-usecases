<?xml version="1.0"?>
<!-- 

(c) 2005-2013 Copyright, Real-Time Innovations, Inc.  All rights reserved.    	                             
RTI grants Licensee a license to use, modify, compile, and create derivative works 
of the Software.  Licensee has the right to distribute object form only for use with RTI 
products.  The Software is provided “as is”, with no warranty of any type, including 
any warranty for fitness for any purpose. RTI is under no obligation to maintain or 
support the Software.  RTI shall not be liable for any incidental or consequential 
damages arising out of the use or inability to use the software.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Description:
XML QoS Profile for Flight Plan Data

For more information about XML QoS Profiles see Chapter 15 in the 
RTI Connext user manual.
-->
<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="http://community.rti.com/schema/5.1.0/rti_dds_qos_profiles.xsd"
     version="5.1.0">
    <!-- QoS Library containing the QoS profile used in the example.
        A QoS library is a named set of QoS profiles.
    -->
    <qos_library name="RTIExampleQosLibrary">



        <qos_profile name="FlightPlanStateData" base_name="OneToManyMulticast">
            <!-- QoS used to configure the data writer created in the example code -->
            <datawriter_qos>
                <!-- Resource limits: to allow the application to specify
                       a different number of maximum tracks that can be handled
                       at once, the resource limits are being set in code. 
                       -->
                <!--<resource_limits>
                    <max_samples>128</max_samples>
                    <max_instances>64</max_instances>
                    <max_samples_per_instance>2</max_samples_per_instance>
                  </resource_limits>-->

                <!-- Tuning the reliability protocol for faster reliable 
                     data repairs (at the expense of bandwidth). -->
                <protocol>
                    
                    <rtps_reliable_writer>
                        <!-- Does not change behavior in a system with no 
                             multicast.  However, if somebody does enable 
                             multicast on a DataReader, this will prevent 
                             potential delays. -->
                        <enable_multicast_periodic_heartbeat>true</enable_multicast_periodic_heartbeat>
                    </rtps_reliable_writer>
                </protocol>

            </datawriter_qos>

            <!-- QoS used to configure the data reader created in the example code -->
            <datareader_qos>

                <!-- Resource limits: to allow the application to specify
                   a different number of maximum tracks that can be handled
                   at once, the resource limits are being set in code. 
                   -->
                <!--<resource_limits>
                    <max_samples>128</max_samples>
                    <max_instances>64</max_instances>
                    <max_samples_per_instance>2</max_samples_per_instance>
                  </resource_limits>-->

                <!-- Response delays in the DataReader are useful if there is a
                   large fanout of readers to writers - they prevent the 
                   readers from simultaneously resonding to heartbeats and 
                   flooding the writers.  With smaller numbers of readers the
                   delays can be set to zero.  -->
                <protocol>
                    <rtps_reliable_reader>
                        <min_heartbeat_response_delay>
                            <sec>0</sec>
                            <nanosec>0</nanosec>
                        </min_heartbeat_response_delay>
                        <max_heartbeat_response_delay>
                            <sec>0</sec>
                            <nanosec>0</nanosec>
                        </max_heartbeat_response_delay>
                    </rtps_reliable_reader>
                </protocol>

            </datareader_qos>

            <participant_qos>
                <participant_name>
                    <name>Flight Plan Application</name>
                </participant_name>
            </participant_qos>
            
        </qos_profile>

    </qos_library>
    
</dds>
